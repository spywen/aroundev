/**
 * Created by laurent on 18/10/2014.
 */
angular.module('aroundev', [
    'ngAnimate',
    'ui.bootstrap',
    'aroundev.translate',
    'aroundev.menu',
    'aroundev.index',
    'aroundev.user.login',
    'aroundev.service.auth'
])
.config(["$translateProvider", "$locationProvider", function($translateProvider, $locationProvider){
    $locationProvider.html5Mode(true);//Remove the '#' on the url
}])
.value('user', null)
.constant('configs', {
    defaultLanguage: '"en"',
    translateAllowed: false
})
.constant('roles', {
    authenticated:'AUTHENTICATED',
    admin:'ADMIN',
    user:'USER'
})
.run(["authService", "$location", "$rootScope", "$state", "roles", function(authService, $location, $rootScope, $state, roles){
    authService.getProfile().then(function(result){
        $rootScope.$broadcast('user:logged', result);
    },function(){
        console.log('Person not connected');
    });

    $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams){
        if (!_.isEmpty(toState.hasRoles)){
            authService.hasRoles(toState.hasRoles).then(function(result){
                if(!result){
                    $state.transitionTo("login");
                    event.preventDefault();
                }
            },function(){});
        }
        if (!_.isEmpty(toState.hasNotRoles)){
            authService.hasRoles(toState.hasNotRoles).then(function(result){
                if(result){
                    $state.transitionTo("index");
                    event.preventDefault();
                }
            },function(){});
        }
    });
}]);

/**
 * Created by laurent on 19/10/2014.
 */
angular.module('aroundev.service.auth', [
    'pascalprecht.translate',
    'restangular',
    'aroundev.service.utils'
])
.config(["RestangularProvider", function(RestangularProvider){
    //RestangularProvider.setBaseUrl('/api/user/');
}])
.service('authService',["$translate", "$http", "$location", "Restangular", "$q", "user", "toastr", "utilsService", function($translate, $http, $location, Restangular, $q, user, toastr, utilsService){

    this.login = function(login,password){
        return $q(function(resolve, reject){
            Restangular.one('login').customPOST("login="+login+"&password="+password, undefined, undefined, {'Content-Type': 'application/x-www-form-urlencoded'}).then(function(){
                resolve(true);
            },function(){
                reject(false);
            });
        });
    };

    this.logout = function(){
        return $q(function(resolve, reject){
            Restangular.one('logout').get().then(function(){
                window.location.reload();
                resolve(result);
            }, function(){
                toastr.error($translate.instant('LOGIN_LOG_OUT_FAILED'));
                reject(false);
            });
        });
    };

    this.getProfile = function(){
        return $q(function(resolve, reject){
            if(_.isNull(user) || (_.isEmpty(user.roles))){
                Restangular.one('api/user/currentProfil').get().then(function(result){
                    var rolesNames = [];
                    _.forEach(result.roles, function(role){
                        rolesNames.push(role.name);
                    });
                    user = {username: result.login, roles:rolesNames};
                    resolve(result);
                },function(){
                    user = {username: '', roles:[]};
                    reject(false);
                });
            }else{
                resolve(user);
            }
        });
    };

    this.hasRoles = function(roles){
        var that = this;
        return $q(function(resolve, reject){
            if(!_.isNull(user)){
                resolve(utilsService.containMoreThanOne(user.roles, roles));
            }else{
                that.getProfile().then(function(){
                    resolve(utilsService.containMoreThanOne(user.roles, roles));
                },function(){
                    resolve(false);
                });
            }
        });
    };

}]);
/**
 * Created by laurent on 02/11/14.
 */
angular.module('aroundev.service.utils', [])
.service('utilsService',function(){

    this.errorMessage = {
        containMoreThanOne_Parameters : 'More than one of parameters are not an array'
    };

    this.containMoreThanOne = function(baseObjectsList, searchedObjects){

        //Checks validity
        if(!_.isArray(baseObjectsList) || !_.isArray(searchedObjects)){
            return this.errorMessage.containMoreThanOne_Parameters;
        }

        var found = false;
        _.forEach(searchedObjects, function(oneSearchedObject){
            if(_.contains(baseObjectsList, oneSearchedObject)){
                found = true;
            }
        });
        return found;
    };

});
/**
 * Created by laurent on 19/10/2014.
 */
angular.module('aroundev.index', [
    'ui.router'
])
.config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider){
    $stateProvider.state('index', {
        url: '/',
        templateUrl: '/app/js/modules/index/view/index.html',
        controller: 'indexCtrl',
        authenticate: false,
        hasRoles:[],
        hasNotRoles:[]
    });
}])
.controller('indexCtrl', ["$scope", function($scope) {
    $scope.pageClass = 'indexPageClass';
}]);
/**
 * Created by laurent on 18/10/2014.
 */
angular.module('aroundev.translate', [
    'aroundev.service.auth',
    'pascalprecht.translate',
    'ngCookies'
])
.config(["$translateProvider", function($translateProvider){
    //Translate
    $translateProvider.useStaticFilesLoader({
        prefix: '/app/js/modules/languages/json/',
        suffix: '.json'
    });
    $translateProvider.useCookieStorage();
    $translateProvider.preferredLanguage('en');
}])
.controller('translateCtrl', ["$scope", "$translate", "$cookies", "configs", function($scope, $translate, $cookies, configs) {

    /*Enabled or disabled the translate feature*/
    $scope.translateAllowed = configs.translateAllowed;
    //By default english language : Remark -> need to reload page 2x to take in account the default language
    if(!configs.translateAllowed){
        $cookies.NG_TRANSLATE_LANG_KEY = configs.defaultLanguage;
    }

    $scope.en = false;
    $scope.fr = false;

    var currentLanguage = $cookies.NG_TRANSLATE_LANG_KEY;
    if(currentLanguage === '"en"'){
        $scope.en = true;
    }else if(currentLanguage === '"fr"'){
        $scope.fr = true;
    }else{
        $scope.en = true;
    }

    $scope.changeLanguage = function (langKey){
        $translate.use(langKey);
        $scope.en = false;
        $scope.fr = false;
        if(langKey === 'en'){
            $scope.en = true;
        }else if(langKey === 'fr'){
            $scope.fr = true;
        }else{
            $scope.en = true;
        }
    };
}]);
/**
 * Created by laurent on 19/10/2014.
 */
angular.module('aroundev.menu', [
    'aroundev.service.auth'
])
.controller('menuCtrl', ["$scope", "authService", "$rootScope", "$location", function($scope, authService, $rootScope, $location) {

    //Catch global event : user just logged
    $rootScope.$on ('user:logged', function (event, profile) {
        $scope.activeConnectedMode(profile);
    });


    //Variable which indicate if we are connected
    $scope.logged = false;

    //User connected
    $scope.activeConnectedMode = function(profile){
        $scope.logged = true;
        $scope.username = profile.login;
    };

    //Logout click event
    $scope.logOut = function(){
        authService.logout();
    };

    /* Manage the selected page indicator */
    $scope.isActive = function (viewLocation) {
        return new RegExp(viewLocation).test($location.path());
    };
}])
.directive('menu',function(){
    return {
        scope: true,
        restrict:'E',//<=> <menu></menu> (E as Element) and are not allowed : class='menu' (C as class) or <div menu>... (A as attribute)
        controller:'menuCtrl',
        templateUrl:'/app/js/modules/menu/view/menu.html'
        //compile : function ..., replace : true or false
    };
});
/**
 * Created by laurent on 19/10/2014.
 */
angular.module('aroundev.user.login', [
    'aroundev.service.auth',
    'pascalprecht.translate',
    'ui.router',
    'toastr'
])
.config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider){
    $stateProvider.state('login', {
        url:'/login',
        templateUrl: '/app/js/modules/user/view/login.html',
        controller: 'loginCtrl',
        authenticate: false,
        hasRoles:[],
        hasNotRoles:['AUTHENTICATED']
    });
}])
.constant('localConfig', { connexionLatence : 1000 })
.controller('loginCtrl', ["$translate", "$scope", "authService", "$interval", "$location", "$rootScope", "localConfig", "toastr", "$state", function($translate, $scope, authService, $interval, $location, $rootScope, localConfig, toastr, $state) {

    //Variable to manage $interval functionnality
    $scope.chrono = undefined;

    $scope.pageClass = 'loginPageClass';

    $scope.logIn = function(){
        $scope.progressBarLogin = true;
        $scope.progressBarValue = 20;

        $scope.chrono = $interval(function(){
            authService.login($scope.login, $scope.password).then(function(result){
                $scope.progressBarValue = 60;
                authService.getProfile().then(function(result){
                    $scope.progressBarValue = 100;
                    $scope.progressBarType = 'progress-bar-success';
                    $scope.chrono = $interval(function(){
                        toastr.success($translate.instant('LOGIN_LOG_IN_SUCCESS'));
                        $rootScope.$emit ('user:logged', result);
                        $state.transitionTo("index");
                        $scope.resetProgressBar();
                    }, localConfig.connexionLatence, 1);
                }, function(error){
                    toastr.error($translate.instant('COMMON_ERROR'));
                    $scope.progressBarType = 'progress-bar-danger';
                });
            }, function(error){
                    toastr.error($translate.instant('LOGIN_LOG_IN_FAILED'));
                    $scope.progressBarValue = 100;
                    $scope.progressBarType = 'progress-bar-danger';
                    $scope.chrono = $interval(function(){
                        return $scope.resetProgressBar();
                    }, 4000, 1);
            });
        }, localConfig.connexionLatence, 1);
    };

    $scope.resetProgressBar = function(){
        $scope.progressBarLogin = false;
        $scope.progressBarValue = 0;
        $scope.progressBarType = '';
    };

    $scope.loginCtrlFieldsUpdated = function(){
        $interval.cancel($scope.chrono);
        $scope.resetProgressBar();
    };
}]);

